// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package injectors

import (
	"github.com/IBM-Cloud/ibm-cloud-cli-sdk/plugin"
	"github.com/IBM/ibmcloud-cos-cli/di/providers"
	"github.com/IBM/ibmcloud-cos-cli/render"
	"github.com/IBM/ibmcloud-cos-cli/utils"
)

// Injectors from wire.go:

func InitializeCosContext(pluginContext plugin.PluginContext) (*utils.CosContext, error) {
	ui := providers.NewUI()
	pluginConfig := providers.GetPluginConfig(pluginContext)
	baseConfig := providers.GetBaseConfig(pluginContext)
	cosEndPointsWSClient, err := providers.NewCOSEndPointsWSClient(pluginContext, baseConfig)
	if err != nil {
		return nil, err
	}
	config, err := providers.NewConfig(pluginContext, cosEndPointsWSClient, baseConfig)
	if err != nil {
		return nil, err
	}
	session, err := providers.NewSession(config)
	if err != nil {
		return nil, err
	}
	jsonRender := render.NewJSONRender(ui)
	textRender := render.NewTextRender(ui)
	errorRender := render.NewErrorRender(ui)
	v := providers.GetS3APIFn()
	v2 := providers.GetDownloaderAPIFn()
	v3 := providers.GetUploaderAPIFn()
	v4 := providers.GetAsperaTransferFn()
	if err != nil {
		return nil, err
	}
	fileOperationsImpl := providers.GetFileOperations()
	cosContext := &utils.CosContext{
		UI:               ui,
		Config:           pluginConfig,
		Session:          session,
		ListKnownRegions: cosEndPointsWSClient,
		JSONRender:       jsonRender,
		TextRender:       textRender,
		ErrorRender:      errorRender,
		ClientGen:        v,
		DownloaderGen:    v2,
		UploaderGen:      v3,
		AsperaTransferGen: v4,
		FileOperations:   fileOperationsImpl,
	}
	return cosContext, nil
}
