// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	fs "io/fs"

	utils "github.com/IBM/ibmcloud-cos-cli/utils"
	mock "github.com/stretchr/testify/mock"
)

// FileOperations is an autogenerated mock type for the FileOperations type
type FileOperations struct {
	mock.Mock
}

// GetFileInfo provides a mock function with given fields: location
func (_m *FileOperations) GetFileInfo(location string) (fs.FileInfo, error) {
	ret := _m.Called(location)

	var r0 fs.FileInfo
	if rf, ok := ret.Get(0).(func(string) fs.FileInfo); ok {
		r0 = rf(location)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(fs.FileInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(location)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalBytes provides a mock function with given fields: location
func (_m *FileOperations) GetTotalBytes(location string) (int64, error) {
	ret := _m.Called(location)

	var r0 int64
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(location)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(location)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadSeekerCloserOpen provides a mock function with given fields: location
func (_m *FileOperations) ReadSeekerCloserOpen(location string) (utils.ReadSeekerCloser, error) {
	ret := _m.Called(location)

	var r0 utils.ReadSeekerCloser
	if rf, ok := ret.Get(0).(func(string) utils.ReadSeekerCloser); ok {
		r0 = rf(location)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(utils.ReadSeekerCloser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(location)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Remove provides a mock function with given fields: location
func (_m *FileOperations) Remove(location string) error {
	ret := _m.Called(location)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(location)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WriteCloserOpen provides a mock function with given fields: location
func (_m *FileOperations) WriteCloserOpen(location string) (utils.WriteCloser, error) {
	ret := _m.Called(location)

	var r0 utils.WriteCloser
	if rf, ok := ret.Get(0).(func(string) utils.WriteCloser); ok {
		r0 = rf(location)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(utils.WriteCloser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(location)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
